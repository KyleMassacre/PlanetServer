<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlanetServer</name>
    </assembly>
    <members>
        <member name="T:PS.Core.PlanetServer">
            <summary>
            PlanetServer is a multithreaded TCP based socket server.  The server is based around .NET 2.0 for the widest possible compatiblity.
            Designed with Unity in mind, it will work with any C# based client. 
            </summary>
        </member>
        <member name="M:PS.Core.PlanetServer.#ctor">
            <summary>
            Creates an instance of the PlanetServer class.
            By default, message queuing is turned on.
            </summary>
        </member>
        <member name="M:PS.Core.PlanetServer.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the PlanetServer class.
            </summary>
            <param name="queueMessages">Flag to determine if messages will be dispatached as soon as they are recieved.  Or queued up to be dispatched as a group.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.Setup(System.Boolean)">
            <summary>
            Create resources for operation
            </summary>
            <param name="queueMessages">Flag to determine if messages will be dispatached as soon as they are recieved.  Or queued up to be dispatched as a group.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.Connect(System.String,System.Int32)">
            <summary>
            Attempt a connection to the server.
            </summary>
            <param name="host">The host machine the server will try and connect to.</param>
            <param name="port">The IP on the host machine.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.ConnectCallback(System.IAsyncResult)">
            <summary>
            Callback for a connection attempt.
            Will dispatch a connection event with the success of the operation.
            </summary>
            <param name="ar">Status of the current operation.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.Disconnect">
            <summary>
            Disconnect from the server
            </summary>
        </member>
        <member name="M:PS.Core.PlanetServer.DisconnectCallback(System.IAsyncResult)">
            <summary>
            Callback for a disconnect.
            </summary>
            <param name="ar">Status of the current operation.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            Start to receive a message from the server.
            </summary>
            <param name="client">Socket connection to the server.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback for recieving a message from the server.  Maybe be called more then once per message if large enough.  This will dispatch the appropriate PsEvent when the
            entire message wahs been receivied.
            </summary>
            <param name="ar">Status of the current operation.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.Send(PS.Requests.PsRequest)">
            <summary>
            Send a PsRequest to the server.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:PS.Core.PlanetServer.SendCallback(System.IAsyncResult)">
            <summary>
            Callback for sending message to server.
            </summary>
            <param name="ar">Status of the current operation.</param>
        </member>
        <member name="M:PS.Core.PlanetServer.SendMessage(PS.Events.PsEvent)">
            <summary>
            Will either send the message or queue it for later delivery.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PS.Core.PlanetServer.DispatchEvents">
            <summary>
            Dispatches any messages enqueqed since the last dispatch.
            </summary>
        </member>
        <member name="P:PS.Core.PlanetServer.Host">
            <summary>
            The host machine the server will try and connect to.
            </summary>
        </member>
        <member name="P:PS.Core.PlanetServer.Port">
            <summary>
            The IP on the host machine.
            </summary>
        </member>
        <member name="P:PS.Core.PlanetServer.QueueMessages">
            <summary>
            Flag to determine if messages will be dispatached as soon as they are recieved.
            Or queued up to be dispatched as a group.
            </summary>
        </member>
        <member name="P:PS.Core.PlanetServer.EventDispatcher">
            <summary>
            Endpoint for listening for messages.
            </summary>
        </member>
        <member name="T:PS.Requests.PublicMessageRequest">
            <summary>
            Send a chat message to everybody currently connected to the server.
            </summary>
        </member>
        <member name="T:PS.Requests.PsRequest">
            <summary>
            Base request all PlanetServer requests extend.
            </summary>
        </member>
        <member name="F:PS.Requests.PsRequest.REQUEST_TYPE">
            <summary>
            Request type constant.
            </summary>
        </member>
        <member name="F:PS.Requests.PsRequest._object">
            <summary>
            Internal PsObject for this request.
            </summary>
        </member>
        <member name="M:PS.Requests.PsRequest.#ctor(PS.Requests.RequestType)">
            <summary>
            Initializes a new instance of the PsRequest class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PS.Requests.PsRequest.Init(PS.Data.PsObject)">
            <summary>
            Initializes the internal PsObject.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PS.Requests.PsRequest.GenerateMessage">
            <summary>
            Creates byte array of the JSON representation of this message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PS.Requests.PsRequest.Type">
            <summary>
            Type of message this request is.
            </summary>
        </member>
        <member name="M:PS.Requests.PublicMessageRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PublicMessageRequest class.
            </summary>
            <param name="message">Message to be sent to the server.</param>
        </member>
        <member name="M:PS.Requests.PublicMessageRequest.#ctor(System.String,PS.Data.PsObject)">
            <summary>
            Initializes a new instance of the PublicMessageRequest class.
            </summary>
            <param name="message">Message to be sent to the server.</param>
            <param name="obj">Data to be sent to the server with this message.</param>
        </member>
        <member name="P:PS.Requests.PublicMessageRequest.Message">
            <summary>
            Message to be sent to the server.
            </summary>
        </member>
        <member name="F:Constants.TYPE_FLAG">
            <summary>
            Type constant.
            </summary>
        </member>
        <member name="F:Constants.VALUE_FLAG">
            <summary>
            Value constant.
            </summary>
        </member>
        <member name="T:Constants.PsType">
            <summary>
            Types of values.
            </summary>
        </member>
        <member name="F:Constants.PsType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:Constants.PsType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Constants.PsType.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:Constants.PsType.Long">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:Constants.PsType.Float">
            <summary>
            Float.
            </summary>
        </member>
        <member name="F:Constants.PsType.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:Constants.PsType.PSObject">
            <summary>
            PsObject.
            </summary>
        </member>
        <member name="F:Constants.PsType.PSArray">
            <summary>
            PsArray.
            </summary>
        </member>
        <member name="F:Constants.PsType.Number">
            <summary>
            (Flash)Number.
            </summary>
        </member>
        <member name="T:PS.Data.PsArray">
            <summary>
            Holds an array of data.
            </summary>
        </member>
        <member name="F:PS.Data.PsArray._content">
            <summary>
            Data for the array.
            </summary>
        </member>
        <member name="M:PS.Data.PsArray.Create(System.Object[])">
            <summary>
            Create an PsArray from an array of objects.
            </summary>
            <param name="obj">Array of objects.</param>
            <returns></returns>
        </member>
        <member name="M:PS.Data.PsArray.#ctor">
            <summary>
            Initializes a new instance of the PsArray class.
            </summary>
        </member>
        <member name="M:PS.Data.PsArray.GetBoolean(System.Int32)">
            <summary>
            Look for a boolean value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Boolean value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetString(System.Int32)">
            <summary>
            Look for a string value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>String value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetInt(System.Int32)">
            <summary>
            Look for a int value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Int value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetLong(System.Int32)">
            <summary>
            Look for a long value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Long value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetFloat(System.Int32)">
            <summary>
            Look for a float value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Float value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetDouble(System.Int32)">
            <summary>
            Look for a double value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Double value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetPsObject(System.Int32)">
            <summary>
            Look for a PsObject value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>PsObject value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetPsArray(System.Int32)">
            <summary>
            Look for a PsArray value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>PsArray value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.GetNumber(System.Int32)">
            <summary>
            Look for a (Flash)number value in the array.
            </summary>
            <param name="key">Key to lookup.</param>
            <returns>Number value of the key.</returns>
        </member>
        <member name="M:PS.Data.PsArray.AddBoolean(System.Boolean)">
            <summary>
            Add a boolean to the array.
            </summary>
            <param name="value">Boolean to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddString(System.String)">
            <summary>
            Add a string to the array.
            </summary>
            <param name="value">String to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddInt(System.Int32)">
            <summary>
            Add a int to the array.
            </summary>
            <param name="value">Int to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddLong(System.Int64)">
            <summary>
            Add a long to the array.
            </summary>
            <param name="value">Long to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddFloat(System.Single)">
            <summary>
            Add a float to the array.
            </summary>
            <param name="value">Float to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddDouble(System.Double)">
            <summary>
            Add a double to the array.
            </summary>
            <param name="value">Double to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddPsObject(PS.Data.PsObject)">
            <summary>
            Add a PsObject to the array.
            </summary>
            <param name="value">PsObject to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddPsArray(PS.Data.PsArray)">
            <summary>
            Add a PsArray to the array.
            </summary>
            <param name="value">PsArray to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.AddNumber(System.Double)">
            <summary>
            Add a (Flash)number to the array.
            </summary>
            <param name="value">Number to add.</param>
        </member>
        <member name="M:PS.Data.PsArray.ToArrayObject">
            <summary>
            Creates a List of objects from the array.
            </summary>
            <returns>List of objects.</returns>
        </member>
        <member name="M:PS.Data.PsArray.ToString">
            <summary>
            Creates a string from the data.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:PS.Data.PsArray.Count">
            <summary>
            Number of items in the array.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonWriter">
            <summary>
            Writer for producing JSON data
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Ctor
            </summary>
            <param name="output">TextWriter for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.IO.TextWriter,Pathfinding.Serialization.JsonFx.JsonWriterSettings)">
            <summary>
            Ctor
            </summary>
            <param name="output">TextWriter for writing</param>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Ctor
            </summary>
            <param name="output">Stream for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.IO.Stream,Pathfinding.Serialization.JsonFx.JsonWriterSettings)">
            <summary>
            Ctor
            </summary>
            <param name="output">Stream for writing</param>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="output">file name for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.String,Pathfinding.Serialization.JsonFx.JsonWriterSettings)">
            <summary>
            Ctor
            </summary>
            <param name="output">file name for writing</param>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Ctor
            </summary>
            <param name="output">StringBuilder for appending</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.#ctor(System.Text.StringBuilder,Pathfinding.Serialization.JsonFx.JsonWriterSettings)">
            <summary>
            Ctor
            </summary>
            <param name="output">StringBuilder for appending</param>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.Serialize(System.Object)">
            <summary>
            A helper method for serializing an object to JSON
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.IsIgnored(System.Type,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Determines if the property or field should not be serialized.
            </summary>
            <param name="objType"></param>
            <param name="member"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            Checks these in order, if any returns true then this is true:
            - is flagged with the JsonIgnoreAttribute property
            - has a JsonSpecifiedProperty which returns false
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.IsDefaultValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Determines if the member value matches the DefaultValue attribute
            </summary>
            <returns>if has a value equivalent to the DefaultValueAttribute</returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.GetFlagList(System.Type,System.Object)">
            <summary>
            Splits a bitwise-OR'd set of enums into a list.
            </summary>
            <param name="enumType">the enum type</param>
            <param name="value">the combined value</param>
            <returns>list of flag enums</returns>
            <remarks>
            from PseudoCode.EnumHelper
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriter.InvalidIeee754(System.Decimal)">
            <summary>
            Determines if a numberic value cannot be represented as IEEE-754.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.PrettyPrint">
            <summary>
            Gets and sets if JSON will be formatted for human reading
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.Tab">
            <summary>
            Gets and sets the string to use for indentation
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.NewLine">
            <summary>
            Gets and sets the line terminator string
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.Depth">
            <summary>
            Gets the current nesting depth
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.MaxDepth">
            <summary>
            Gets and sets the maximum depth to be serialized
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.UseXmlSerializationAttributes">
            <summary>
            Gets and sets if should use XmlSerialization Attributes
            </summary>
            <remarks>
            Respects XmlIgnoreAttribute, ...
            </remarks>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.DateTimeSerializer">
            <summary>
            Gets and sets a proxy formatter to use for DateTime serialization
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.TextWriter">
            <summary>
            Gets the underlying TextWriter
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriter.Settings">
            <summary>
            Gets and sets the JsonWriterSettings
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonToken">
            <summary>
            Parse Tokens
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonReader">
            <summary>
            Reader for consuming JSON data
            </summary>
        </member>
        <member name="F:Pathfinding.Serialization.JsonFx.JsonReader.previouslyDeserialized">
            List of previously deserialized objects.
            Used for reference cycle handling.
        </member>
        <member name="F:Pathfinding.Serialization.JsonFx.JsonReader.jsArrays">
            Cache ArrayLists. Otherwise every new deseriaization of an array wil allocate
            a new ArrayList.
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Ctor
            </summary>
            <param name="input">TextReader containing source</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.IO.TextReader,Pathfinding.Serialization.JsonFx.JsonReaderSettings)">
            <summary>
            Ctor
            </summary>
            <param name="input">TextReader containing source</param>
            <param name="settings">JsonReaderSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.IO.Stream)">
            <summary>
            Ctor
            </summary>
            <param name="input">Stream containing source</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.IO.Stream,Pathfinding.Serialization.JsonFx.JsonReaderSettings)">
            <summary>
            Ctor
            </summary>
            <param name="input">Stream containing source</param>
            <param name="settings">JsonReaderSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="input">string containing source</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.String,Pathfinding.Serialization.JsonFx.JsonReaderSettings)">
            <summary>
            Ctor
            </summary>
            <param name="input">string containing source</param>
            <param name="settings">JsonReaderSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.Text.StringBuilder)">
            <summary>
            Ctor
            </summary>
            <param name="input">StringBuilder containing source</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.#ctor(System.Text.StringBuilder,Pathfinding.Serialization.JsonFx.JsonReaderSettings)">
            <summary>
            Ctor
            </summary>
            <param name="input">StringBuilder containing source</param>
            <param name="settings">JsonReaderSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize">
            <summary>
            Convert from JSON string to Object graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.Int32)">
            <summary>
            Convert from JSON string to Object graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.Type)">
            <summary>
            Convert from JSON string to Object graph of specific Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.Int32,System.Type)">
            <summary>
            Convert from JSON string to Object graph of specific Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Read(System.Type,System.Boolean)">
            <summary>
            Convert from JSON string to Object graph of specific Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.PopulateObject(System.Object@)">
            Populates an object with serialized data.
            Note that in case the object has been loaded before (another reference to it)
            the passed object will be changed to the previously loaded object (this only applies
            if you have enabled CyclicReferenceHandling in the settings).
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.ReadUnquotedKey">
            <summary>
            Reads an unquoted JSON object key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.ReadString(System.Type)">
            <summary>
            Reads a JSON string
            </summary>
            <param name="expectedType"></param>
            <returns>string or value which is represented as a string in JSON</returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.String)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize``1(System.String)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.String,System.Int32)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <param name="value"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize``1(System.String,System.Int32)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.String,System.Type)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.Deserialize(System.String,System.Int32,System.Type)">
            <summary>
            A fast method for deserializing an object from JSON
            </summary>
            <param name="value">source text</param>
            <param name="start">starting position</param>
            <param name="type">expected type</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.MatchLiteral(System.String)">
            <summary>
            Determines if the next token is the given literal
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.CoerceType``1(System.Object,``0)">
            <summary>
            Converts a value into the specified type using type inference.
            </summary>
            <typeparam name="T">target type</typeparam>
            <param name="value">value to convert</param>
            <param name="typeToMatch">example object to get the type from</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.CoerceType``1(System.Object)">
            <summary>
            Converts a value into the specified type.
            </summary>
            <typeparam name="T">target type</typeparam>
            <param name="value">value to convert</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReader.CoerceType(System.Type,System.Object)">
            <summary>
            Converts a value into the specified type.
            </summary>
            <param name="targetType">target type</param>
            <param name="value">value to convert</param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReader.EOF">
            True if there is nothing more to deserialize 
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReader.AllowNullValueTypes">
            <summary>
            Gets and sets if ValueTypes can accept values of null
            </summary>
            <remarks>
            Only affects deserialization: if a ValueType is assigned the
            value of null, it will receive the value default(TheType).
            Setting this to false, throws an exception if null is
            specified for a ValueType member.
            </remarks>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReader.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting.
            </summary>
        </member>
        <member name="T:JsonFx.About">
            <summary>
            JsonFx metadata
            </summary>
        </member>
        <member name="M:JsonFx.About.#ctor(System.Reflection.Assembly)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:PS.Rooms.Room">
            <summary>
            A room to hold users.
            </summary>
        </member>
        <member name="T:PS.Data.PsObject">
            <summary>
            PsObject is the basis of sending data to and from the server.  It can hold an arbitrary number of key-value pairs of primitive data types, 
            Lists of primitive data types, PsArrays, and other PsObjects.
            </summary>
        </member>
        <member name="M:PS.Data.PsObject.Create(System.String)">
            <summary>
            Create a PsObject from a JSON string.
            </summary>
            <param name="json">JSON to create PsObject.</param>
            <returns>PsObject containing values from JSON.</returns>
        </member>
        <member name="M:PS.Data.PsObject.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a PsObject from Dictionary of string, object pairs.
            </summary>
            <param name="dict">Key-value pairs of data.</param>
            <returns>PsObject containing values from Dictionary.</returns>
        </member>
        <member name="M:PS.Data.PsObject.#ctor">
            <summary>
            Initializes a new instance of the PsObject class.
            </summary>
        </member>
        <member name="M:PS.Data.PsObject.HasKey(System.String)">
            <summary>
            Get if PsObject contains a key.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>true if the key exisits, false if it doesn't.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetInt(System.String)">
            <summary>
            Look for a int value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Int value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetNumber(System.String)">
            <summary>
            Look for a (Flash)number value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Number value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetString(System.String)">
            <summary>
            Look for a string value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>String value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetBoolean(System.String)">
            <summary>
            Look for a boolean value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Boolean value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetFloat(System.String)">
            <summary>
            Look for a float value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Float value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetLong(System.String)">
            <summary>
            Look for a long value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Long value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetPsObject(System.String)">
            <summary>
            Look for a PsObject value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>PsObject value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetPsArray(System.String)">
            <summary>
            Look for a PsArray value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>PsArray value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetBoolArray(System.String)">
            <summary>
            Look for a boolean array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Boolean array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetStringArray(System.String)">
            <summary>
            Look for a string array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>String array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetIntArray(System.String)">
            <summary>
            Look for a int array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Int array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetLongArray(System.String)">
            <summary>
            Look for a long array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Long array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetFloatArray(System.String)">
            <summary>
            Look for a float array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>float array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetDoubleArray(System.String)">
            <summary>
            Look for a double array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Double array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetPsObjectArray(System.String)">
            <summary>
            Look for a PsObject array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>PsObject array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.GetNumberArray(System.String)">
            <summary>
            Look for a (Flash)number array value in the PsObject.
            </summary>
            <param name="key">Key to look for.</param>
            <returns>Number array value of key.</returns>
        </member>
        <member name="M:PS.Data.PsObject.SetInt(System.String,System.Int32)">
            <summary>
            Set a int in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetNumber(System.String,System.Single)">
            <summary>
            Set a number in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetString(System.String,System.String)">
            <summary>
            Set a string in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetBoolean(System.String,System.Boolean)">
            <summary>
            Set a boolean in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetFloat(System.String,System.Single)">
            <summary>
            Set a float in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetLong(System.String,System.Int64)">
            <summary>
            Set a long in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetPsObject(System.String,PS.Data.PsObject)">
            <summary>
            Set a PsObject in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetPsArray(System.String,PS.Data.PsArray)">
            <summary>
            Set a PsArray in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetBooleanArray(System.String,System.Collections.Generic.List{System.Boolean})">
            <summary>
            Set a boolean array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetStringArray(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Set a string array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetIntArray(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set a int array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetLongArray(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            Set a long array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetFloatArray(System.String,System.Collections.Generic.List{System.Single})">
            <summary>
            Set a float array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetDoubleArray(System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Set a double array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetPsObjectArray(System.String,System.Collections.Generic.List{PS.Data.PsObject})">
            <summary>
            Set a PsObject array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.SetNumberArray(System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Set a (Flash)number array in the PsObject.
            </summary>
            <param name="key">Key for value.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PS.Data.PsObject.ToObject">
            <summary>
            Create a raw object for JSON serialization.
            </summary>
            <returns>Object from PsObject.</returns>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonOptInAttribute">
            Specifies that members of this class that should be serialized must be explicitly specified.
            Classes that this attribute is applied to need to explicitly
            declare every member that should be serialized with the JsonMemberAttribute.
            \see JsonMemberAttribute
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonDataWriter">
            <summary>
            An <see cref="T:Pathfinding.Serialization.JsonFx.IDataWriter"/> adapter for <see cref="T:Pathfinding.Serialization.JsonFx.JsonWriter"/>
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.IDataWriter">
            <summary>
            A common interface for data serializers
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.IDataWriter.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the data to the given output
            </summary>
            <param name="output"></param>
            <param name="data"></param>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.IDataWriter.ContentEncoding">
            <summary>
            Gets the content encoding for the serialized data
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.IDataWriter.ContentType">
            <summary>
            Gets the content type for the serialized data
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.IDataWriter.FileExtension">
            <summary>
            Gets the file extension for the serialized data
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataWriter.#ctor(Pathfinding.Serialization.JsonFx.JsonWriterSettings)">
            <summary>
            Ctor
            </summary>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataWriter.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the data object to the output
            </summary>
            <param name="output"></param>
            <param name="data"></param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataWriter.CreateSettings(System.Boolean)">
            <summary>
            Builds a common settings objects
            </summary>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonDataWriter.ContentEncoding">
            <summary>
            Gets the content encoding
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonDataWriter.ContentType">
            <summary>
            Gets the content type
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonDataWriter.FileExtension">
            <summary>
            Gets the file extension
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonDataReader">
            <summary>
            An <see cref="T:Pathfinding.Serialization.JsonFx.IDataReader"/> adapter for <see cref="T:Pathfinding.Serialization.JsonFx.JsonDataReader"/>
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.IDataReader">
            <summary>
            A common interface for data deserializers
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.IDataReader.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Serializes the data to the given output
            </summary>
            <param name="input"></param>
            <param name="data"></param>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.IDataReader.ContentType">
            <summary>
            Gets the content type of the serialized data
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataReader.#ctor(Pathfinding.Serialization.JsonFx.JsonReaderSettings)">
            <summary>
            Ctor
            </summary>
            <param name="settings">JsonWriterSettings</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataReader.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes a data object of Type <param name="type">type</param> from the <param name="input">input</param>
            </summary>
            <param name="output"></param>
            <param name="data"></param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDataReader.CreateSettings(System.Boolean)">
            <summary>
            Builds a common settings objects
            </summary>
            <param name="allowNullValueTypes"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonDataReader.ContentType">
            <summary>
            Gets the content type
            </summary>
        </member>
        <member name="T:PS.Events.LoginEvent">
            <summary>
            Response from logging into the server.
            </summary>
        </member>
        <member name="T:PS.Events.PsEvent">
            <summary>
            Base event all PlanetServer events extend.
            </summary>
        </member>
        <member name="M:PS.Events.PsEvent.#ctor(PS.Events.MessageType)">
            <summary>
            Initializes a new instance of the PsEvent class.
            </summary>
            <param name="type">Type of event.</param>
        </member>
        <member name="M:PS.Events.PsEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="P:PS.Events.PsEvent.Type">
            <summary>
            Type of message.
            </summary>
        </member>
        <member name="M:PS.Events.LoginEvent.#ctor">
            <summary>
            Initializes a new instance of the LoginEvent class.
            </summary>
        </member>
        <member name="M:PS.Events.LoginEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="P:PS.Events.LoginEvent.Success">
            <summary>
            Success of the login.
            </summary>
        </member>
        <member name="P:PS.Events.LoginEvent.Message">
            <summary>
            Message from the login. (if any).
            </summary>
        </member>
        <member name="P:PS.Events.LoginEvent.Data">
            <summary>
            Data from the login (if any).
            </summary>
        </member>
        <member name="T:PS.Events.LogoutEvent">
            <summary>
            Response from logging out of the server.
            </summary>
        </member>
        <member name="M:PS.Events.LogoutEvent.#ctor">
            <summary>
            Initializes a new instance of LogoutEvent.
            </summary>
        </member>
        <member name="M:PS.Events.LogoutEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="T:PS.Requests.LogoutRequest">
            <summary>
            Send a logout request to the server.
            </summary>
        </member>
        <member name="M:PS.Requests.LogoutRequest.#ctor">
            <summary>
            Initializes a new instance of the LogoutRequest class.
            </summary>
        </member>
        <member name="T:PS.Requests.ExtensionRequest">
            <summary>
            Send a extension request to the server.
            </summary>
        </member>
        <member name="M:PS.Requests.ExtensionRequest.#ctor">
            <summary>
            Initializes a new instance of the ExtensionRequest class.
            </summary>
        </member>
        <member name="M:PS.Requests.ExtensionRequest.#ctor(System.String,PS.Data.PsObject)">
            <summary>
            Initializes a new instance of the ExtensionRequest class.
            </summary>
            <param name="command">Command for this request.  A subcommand may also be specified using the format "command.subcommand".</param>
            <param name="obj">Data for the request.</param>
        </member>
        <member name="P:PS.Requests.ExtensionRequest.Command">
            <summary>
            Command for this request.
            </summary>
        </member>
        <member name="T:PS.Events.PublicMessageEvent">
            <summary>
            Message sent from another player to all players on the server.
            </summary>
        </member>
        <member name="M:PS.Events.PublicMessageEvent.#ctor">
            <summary>
            Initializes a new instance of the PublicMessageEvent class.
            </summary>
        </member>
        <member name="M:PS.Events.PublicMessageEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="P:PS.Events.PublicMessageEvent.User">
            <summary>
            Username of player that sent the message.
            </summary>
        </member>
        <member name="P:PS.Events.PublicMessageEvent.Message">
            <summary>
            Message the player sent.
            </summary>
        </member>
        <member name="P:PS.Events.PublicMessageEvent.Data">
            <summary>
            Data that was sent with the message (if any).
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonMemberAttribute">
            Explicitly declare this member to be serialized.
            \see JsonOptInAttribute
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonReaderSettings">
            <summary>
            Controls the deserialization settings for JsonReader
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonReaderSettings.IsTypeHintName(System.String)">
            <summary>
            Determines if the specified name is the TypeHint property
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReaderSettings.HandleCyclicReferences">
            <summary>
            Gets or sets a value indicating whether this to handle cyclic references.
            </summary>
            <remarks>
            Handling cyclic references is slightly more expensive and needs to keep a list
            of all deserialized objects, but it will not crash or go into infinite loops
            when trying to serialize an object graph with cyclic references and after
            deserialization all references will point to the correct objects even if
            it was used in different places (this can be good even if you do not have
            cyclic references in your data).
            
            More specifically, if your object graph (where one reference is a directed edge) 
            is a tree, this should be false, otherwise it should be true.
            
            Note also that the deserialization methods which take a start position
            will not work with this setting enabled.
            </remarks>
            <value>
            <c>true</c> if handle cyclic references; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReaderSettings.AllowNullValueTypes">
            <summary>
            Gets and sets if ValueTypes can accept values of null
            </summary>
            <remarks>
            Only affects deserialization: if a ValueType is assigned the
            value of null, it will receive the value default(TheType).
            Setting this to false, throws an exception if null is
            specified for a ValueType member.
            </remarks>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReaderSettings.AllowUnquotedObjectKeys">
            <summary>
            Gets and sets if objects can have unquoted property names
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonReaderSettings.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonNameAttribute">
            <summary>
            Specifies the naming to use for a property or field when serializing
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonNameAttribute.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonNameAttribute.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="jsonName"></param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonNameAttribute.GetJsonName(System.Object)">
            <summary>
            Gets the name specified for use in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonNameAttribute.Name">
            <summary>
            Gets and sets the name to be used in JSON
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.EcmaScriptWriter">
            <summary>
            Writes data as full ECMAScript objects, rather than the limited set of JSON objects.
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Ctor
            </summary>
            <param name="output">TextWriter for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.#ctor(System.IO.Stream)">
            <summary>
            Ctor
            </summary>
            <param name="output">Stream for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="output">File name for writing</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Ctor
            </summary>
            <param name="output">StringBuilder for appending</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.Serialize(System.Object)">
            <summary>
            A helper method for serializing an object to EcmaScript
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.WriteNamespaceDeclaration(System.IO.TextWriter,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Returns a block of script for ensuring that a namespace is declared.
            </summary>
            <param name="writer">the output writer</param>
            <param name="ident">the namespace to ensure</param>
            <param name="namespaces">list of namespaces already emitted</param>
            <param name="debug">determines if should emit pretty-printed</param>
            <returns>if was a nested identifier</returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.Write(System.DateTime)">
            <summary>
            Writes dates as ECMAScript Date constructors
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.Write(System.Single)">
            <summary>
            Writes out all Single values including NaN, Infinity, -Infinity
            </summary>
            <param name="value">Single</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.Write(System.Double)">
            <summary>
            Writes out all Double values including NaN, Infinity, -Infinity
            </summary>
            <param name="value">Double</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.WriteEcmaScriptRegExp(Pathfinding.Serialization.JsonFx.JsonWriter,System.Text.RegularExpressions.Regex)">
            <summary>
            Outputs a .NET Regex as an ECMAScript RegExp literal.
            Defaults to global matching off.
            </summary>
            <param name="writer"></param>
            <param name="regex"></param>
            <remarks>
            http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptWriter.WriteEcmaScriptRegExp(Pathfinding.Serialization.JsonFx.JsonWriter,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Outputs a .NET Regex as an ECMAScript RegExp literal.
            </summary>
            <param name="writer"></param>
            <param name="regex"></param>
            <param name="isGlobal"></param>
            <remarks>
            http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
            </remarks>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier">
            <summary>
            Represents an ECMAScript identifier for serialization.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.IJsonSerializable">
            <summary>
            Allows classes to control their own JSON serialization
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.EnsureValidIdentifier(System.String,System.Boolean)">
            <summary>
            Ensures is a valid EcmaScript variable expression.
            </summary>
            <param name="varExpr">the variable expression</param>
            <returns>varExpr</returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.EnsureValidIdentifier(System.String,System.Boolean,System.Boolean)">
            <summary>
            Ensures is a valid EcmaScript variable expression.
            </summary>
            <param name="varExpr">the variable expression</param>
            <returns>varExpr</returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.IsValidIdentifier(System.String,System.Boolean)">
            <summary>
            Verifies is a valid EcmaScript variable expression.
            </summary>
            <param name="varExpr">the variable expression</param>
            <returns>varExpr</returns>
            <remarks>
            http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
            
            IdentifierName =
            	IdentifierStart | IdentifierName IdentifierPart
            IdentifierStart =
            	Letter | '$' | '_'
            IdentifierPart =
            	IdentifierStart | Digit
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.Parse(System.String)">
            <summary>
            Trivial conversion method. Essentially performs a cast.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            Supports conversion via System.Web.UI.PropertyConverter.ObjectFromString(Type, MemberInfo, string)
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.op_Implicit(Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier)~System.String">
            <summary>
            Implicit type conversion allows to be used directly as a String
            </summary>
            <param name="ident">valid ECMAScript identifier</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.op_Implicit(System.String)~Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier">
            <summary>
            Implicit type conversion allows to be used directly with Strings
            </summary>
            <param name="ident">valid ECMAScript identifier</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.Equals(System.Object)">
            <summary>
            Compares the identifiers.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.ToString">
            <summary>
            Returns the identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.GetHashCode">
            <summary>
            Returns the hash code for this identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.EcmaScriptIdentifier.Identifier">
            <summary>
            Gets the ECMAScript identifier represented by this instance.
            </summary>
        </member>
        <member name="T:PS.Core.EventDispatcher">
            <summary>
            Holds the list of event handlers.
            </summary>
        </member>
        <member name="M:PS.Core.EventDispatcher.DispatchEvent(PS.Events.PsEvent)">
            <summary>
            Dispatches the message to the appropiate handler for the given message.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:PS.Core.EventDispatcher.ConnectionEvent">
            <summary>
            ConnectionEvent handler.
            </summary>
        </member>
        <member name="E:PS.Core.EventDispatcher.ConnectionLostEvent">
            <summary>
            ConnectionLostEvent handler.
            </summary>
        </member>
        <member name="E:PS.Core.EventDispatcher.LoginEvent">
            <summary>
            LoginEvent handler.
            </summary>
        </member>
        <member name="E:PS.Core.EventDispatcher.LogoutEvent">
            <summary>
            LogoutEvent handler.
            </summary>
        </member>
        <member name="E:PS.Core.EventDispatcher.ExtensionEvent">
            <summary>
            ExtensionEvent handler.
            </summary>
        </member>
        <member name="E:PS.Core.EventDispatcher.PublicMessageEvent">
            <summary>
            PublicMessageEvent handler.
            </summary>
        </member>
        <member name="T:PS.Core.StateObject">
            <summary>
            State of current connection.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.WriteDelegate`1">
            <summary>
            Represents a proxy method for serialization of types which do not implement IJsonSerializable
            </summary>
            <typeparam name="T">the type for this proxy</typeparam>
            <param name="writer">the JsonWriter to serialize to</param>
            <param name="value">the value to serialize</param>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonWriterSettings">
            <summary>
            Controls the serialization settings for JsonWriter
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriterSettings.GetConverter(System.Type)">
            Returns the converter for the specified type 
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonWriterSettings.AddTypeConverter(Pathfinding.Serialization.JsonFx.JsonConverter)">
            Adds a converter to use to serialize otherwise non-serializable types.
            Good if you do not have the source and it throws error when trying to serialize it.
            For example the Unity3D Vector3 can be serialized using a special converter
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.HandleCyclicReferences">
            <summary>
            Gets or sets a value indicating whether this to handle cyclic references.
            </summary>
            <remarks>
            Handling cyclic references is slightly more expensive and needs to keep a list
            of all deserialized objects, but it will not crash or go into infinite loops
            when trying to serialize an object graph with cyclic references and after
            deserialization all references will point to the correct objects even if
            it was used in different places (this can be good even if you do not have
            cyclic references in your data).
            
            More specifically, if your object graph (where one reference is a directed edge) 
            is a tree, this should be false, otherwise it should be true.
            
            Note also that the deserialization methods which take a start position
            will not work with this setting enabled.
            
            When an object is first encountered, it will be serialized, just as usual,
            but when it is encountered again, it will be replaced with an object only
            containing a "@ref" field specifying that this is identical to object number
            [value] that was serialized. This number is zero indexed.
            
            Arrays can unfortunately not be deserialized to the same object if they are
            referenced in multiple places since the contents of the array needs to be deserialized
            before the actual array is created.
            
            Make sure you also enable cyclic reference handling in the reader settings.
            </remarks>
            <value>
            <c>true</c> if handle cyclic references; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting.
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.PrettyPrint">
            <summary>
            Gets and sets if JSON will be formatted for human reading.
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.Tab">
            <summary>
            Gets and sets the string to use for indentation
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.NewLine">
            <summary>
            Gets and sets the line terminator string
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.MaxDepth">
            <summary>
            Gets and sets the maximum depth to be serialized.
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.UseXmlSerializationAttributes">
            <summary>
            Gets and sets if should use XmlSerialization Attributes.
            </summary>
            <remarks>
            Respects XmlIgnoreAttribute, ...
            </remarks>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.DateTimeSerializer">
            <summary>
            Gets and sets a proxy formatter to use for DateTime serialization
            </summary>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonWriterSettings.DebugMode">
            Enables more debugging messages.
            E.g about why some members are not serialized.
            The number of debugging messages are in no way exhaustive
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonConverter.CanConvert(System.Type)">
            Test if this converter can convert the specified type 
        </member>
        <member name="T:PS.Events.ExtensionEvent">
            <summary>
            Response from sending an ExtensionRequest to the server.
            </summary>
        </member>
        <member name="M:PS.Events.ExtensionEvent.#ctor">
            <summary>
            Initializes a new instance of the ExtensionEvent class.
            </summary>
        </member>
        <member name="M:PS.Events.ExtensionEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="P:PS.Events.ExtensionEvent.Command">
            <summary>
            Main command of the received message.
            </summary>
        </member>
        <member name="P:PS.Events.ExtensionEvent.SubCommand">
            <summary>
            Optional routing command of the received message.
            </summary>
        </member>
        <member name="P:PS.Events.ExtensionEvent.Data">
            <summary>
            Data associated with the request message.
            </summary>
        </member>
        <member name="T:PS.Requests.RequestType">
            <summary>
            Types of requests that can be sent.
            </summary>
        </member>
        <member name="F:PS.Requests.RequestType.None">
            <summary>
            No request.
            </summary>
        </member>
        <member name="F:PS.Requests.RequestType.Login">
            <summary>
            Login request.
            </summary>
        </member>
        <member name="F:PS.Requests.RequestType.Logout">
            <summary>
            Logout request.
            </summary>
        </member>
        <member name="F:PS.Requests.RequestType.Extension">
            <summary>
            Extension request.
            </summary>
        </member>
        <member name="F:PS.Requests.RequestType.PublicMessage">
            <summary>
            Public message request.
            </summary>
        </member>
        <member name="T:PS.Events.MessageType">
            <summary>
            Helper class to find paths to event classes for dispatching.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.ConnectionEvent">
            <summary>
            ConnectionEvent.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.ConnectionLostEvent">
            <summary>
            ConnectionLostEvent.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.LoginEvent">
            <summary>
            LoginEvent.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.LogoutEvent">
            <summary>
            LogoutEvent.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.ExtensionEvent">
            <summary>
            ExtensionEvent.
            </summary>
        </member>
        <member name="F:PS.Events.MessageType.PublicMessageEvent">
            <summary>
            PublicMessageEvent.
            </summary>
        </member>
        <member name="M:PS.Events.MessageType.ValueOf(System.String)">
            <summary>
            Find the MessageType from the name.
            </summary>
            <param name="name">Name of MessageType.</param>
            <returns></returns>
        </member>
        <member name="M:PS.Events.MessageType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MessageType class.
            </summary>
            <param name="name">Lookup name of class.</param>
            <param name="clazz">Class package.</param>
        </member>
        <member name="P:PS.Events.MessageType.Name">
            <summary>
            Lookup name of class.
            </summary>
        </member>
        <member name="P:PS.Events.MessageType.Class">
            <summary>
            Class package.
            </summary>
        </member>
        <member name="T:PS.Requests.LoginRequest">
            <summary>
            Send a login request to the server.
            </summary>
        </member>
        <member name="M:PS.Requests.LoginRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the LoginRequest class.
            </summary>
            <param name="username">Username to login with.</param>
            <param name="password">Password for the username.</param>
        </member>
        <member name="T:PS.Data.PsDataWrapper">
            <summary>
            Generic container for holding different data types.
            </summary>
        </member>
        <member name="M:PS.Data.PsDataWrapper.#ctor">
            <summary>
            Initializes a new instance of the PsDataWrapper class.
            </summary>
        </member>
        <member name="M:PS.Data.PsDataWrapper.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the PsDataWrapper class.
            </summary>
            <param name="type">Type of data</param>
            <param name="value">Value of data</param>
        </member>
        <member name="P:PS.Data.PsDataWrapper.v">
            <summary>
            Value to hold.
            </summary>
        </member>
        <member name="P:PS.Data.PsDataWrapper.t">
            <summary>
            Type of value.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.DataReaderProvider">
            <summary>
            Provides lookup capabilities for finding an IDataReader
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.DataReaderProvider.#ctor(System.Collections.Generic.IEnumerable{Pathfinding.Serialization.JsonFx.IDataReader})">
            <summary>
            Ctor
            </summary>
            <param name="readers">inject with all possible readers</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.DataReaderProvider.Find(System.String)">
            <summary>
            Finds an IDataReader by content-type header
            </summary>
            <param name="contentTypeHeader"></param>
            <returns></returns>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.TypeCoercionUtility">
            <summary>
            Utility for forcing conversion between types
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.TypeCoercionUtility.ProcessTypeHint(System.Collections.IDictionary,System.String,System.Type@,System.Collections.Generic.Dictionary{System.String,System.Reflection.MemberInfo}@)">
            <summary>
            If a Type Hint is present then this method attempts to
            use it and move any previously parsed data over.
            </summary>
            <param name="result">the previous result</param>
            <param name="typeInfo">the type info string to use</param>
            <param name="objectType">reference to the objectType</param>
            <param name="memberMap">reference to the memberMap</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.TypeCoercionUtility.GetMemberMap(System.Type)">
            Returns a member map if suitable for the object type.
            Dictionary types will make this method return null
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.TypeCoercionUtility.CreateMemberMap(System.Type)">
            Creates a member map for the type 
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.TypeCoercionUtility.SetMemberValue(System.Object,System.Type,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Helper method to set value of either property or field
            </summary>
            <param name="result"></param>
            <param name="memberType"></param>
            <param name="memberInfo"></param>
            <param name="value"></param>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.TypeCoercionUtility.AllowNullValueTypes">
            <summary>
            Gets and sets if ValueTypes can accept values of null
            </summary>
            <remarks>
            Only affects deserialization: if a ValueType is assigned the
            value of null, it will receive the value default(TheType).
            Setting this to false, throws an exception if null is
            specified for a ValueType member.
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonDeserializationException.GetLineAndColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Helper method which converts the index into Line and Column numbers
            </summary>
            <param name="source"></param>
            <param name="line"></param>
            <param name="col"></param>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonDeserializationException.Index">
            <summary>
            Gets the character position in the stream where the error occurred.
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.DataWriterProvider">
            <summary>
            Provides lookup capabilities for finding an IDataWriter
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.DataWriterProvider.#ctor(System.Collections.Generic.IEnumerable{Pathfinding.Serialization.JsonFx.IDataWriter})">
            <summary>
            Ctor
            </summary>
            <param name="writers">inject with all possible writers</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.DataWriterProvider.ParseHeaders(System.String,System.String)">
            <summary>
            Parses HTTP headers for Media-Types
            </summary>
            <param name="accept">HTTP Accept header</param>
            <param name="contentType">HTTP Content-Type header</param>
            <returns>sequence of Media-Types</returns>
            <remarks>
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </remarks>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.DataWriterProvider.ParseMediaType(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:PS.Events.ConnectionLostEvent">
            <summary>
            Connection was lost to the server.
            </summary>
        </member>
        <member name="M:PS.Events.ConnectionLostEvent.#ctor">
            <summary>
            Initializes a new instance of the ConnectionLostEvent class.
            </summary>
        </member>
        <member name="M:PS.Events.ConnectionLostEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="T:PS.Events.ConnectionEvent">
            <summary>
            Response from connection attempt to server.
            </summary>
        </member>
        <member name="M:PS.Events.ConnectionEvent.#ctor">
            <summary>
            Initializes a new instance of the ConnectionEvent class.
            </summary>
        </member>
        <member name="M:PS.Events.ConnectionEvent.Create(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Override to pack the data for this event.
            </summary>
            <param name="dict">Key-Value pairs of data for this event.</param>
        </member>
        <member name="P:PS.Events.ConnectionEvent.Success">
            <summary>
            Success of connection to the server.
            </summary>
        </member>
        <member name="P:PS.Events.ConnectionEvent.Error">
            <summary>
            Error from connecting to server (if any).
            </summary>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonSpecifiedPropertyAttribute">
            <summary>
            Specifies the name of the property which specifies if member should be serialized.
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonSpecifiedPropertyAttribute.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="propertyName">the name of the property which controls serialization for this member</param>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonSpecifiedPropertyAttribute.GetJsonSpecifiedProperty(System.Reflection.MemberInfo)">
            <summary>
            Gets the name specified for use in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Serialization.JsonFx.JsonSpecifiedPropertyAttribute.SpecifiedProperty">
            <summary>
            Gets and sets the name of the property which
            specifies if member should be serialized
            </summary>
        </member>
        <member name="T:PS.Core.EventDelegate`1">
            <summary>
            Delegate for events.
            </summary>
            <typeparam name="T">Type of event.</typeparam>
            <param name="message">Message to send.</param>
        </member>
        <member name="T:Pathfinding.Serialization.JsonFx.JsonIgnoreAttribute">
            <summary>
            Designates a property or field to not be serialized.
            </summary>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonIgnoreAttribute.IsJsonIgnore(System.Object)">
            <summary>
            Gets a value which indicates if should be ignored in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Serialization.JsonFx.JsonIgnoreAttribute.IsXmlIgnore(System.Object)">
            <summary>
            Gets a value which indicates if should be ignored in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
